// @generated by protobuf-ts 2.8.3 with parameter generate_dependencies,long_type_string,client_grpc1
// @generated from protobuf file "authzed/api/v1/experimental_service.proto" (package "authzed.api.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Cursor } from "./core";
import { Relationship } from "./core";
import { PartialCaveatInfo } from "./core";
import { CheckPermissionResponse_Permissionship } from "./permission_service";
import { Status } from "../../../google/rpc/status";
import { ZedToken } from "./core";
import { Struct } from "../../../google/protobuf/struct";
import { SubjectReference } from "./core";
import { ObjectReference } from "./core";
import { Consistency } from "./permission_service";
/**
 * @generated from protobuf message authzed.api.v1.BulkCheckPermissionRequest
 */
export interface BulkCheckPermissionRequest {
    /**
     * @generated from protobuf field: authzed.api.v1.Consistency consistency = 1;
     */
    consistency?: Consistency;
    /**
     * @generated from protobuf field: repeated authzed.api.v1.BulkCheckPermissionRequestItem items = 2;
     */
    items: BulkCheckPermissionRequestItem[];
}
/**
 * @generated from protobuf message authzed.api.v1.BulkCheckPermissionRequestItem
 */
export interface BulkCheckPermissionRequestItem {
    /**
     * @generated from protobuf field: authzed.api.v1.ObjectReference resource = 1;
     */
    resource?: ObjectReference;
    /**
     * @generated from protobuf field: string permission = 2;
     */
    permission: string;
    /**
     * @generated from protobuf field: authzed.api.v1.SubjectReference subject = 3;
     */
    subject?: SubjectReference;
    /**
     * @generated from protobuf field: google.protobuf.Struct context = 4;
     */
    context?: Struct;
}
/**
 * @generated from protobuf message authzed.api.v1.BulkCheckPermissionResponse
 */
export interface BulkCheckPermissionResponse {
    /**
     * @generated from protobuf field: authzed.api.v1.ZedToken checked_at = 1;
     */
    checkedAt?: ZedToken;
    /**
     * @generated from protobuf field: repeated authzed.api.v1.BulkCheckPermissionPair pairs = 2;
     */
    pairs: BulkCheckPermissionPair[];
}
/**
 * @generated from protobuf message authzed.api.v1.BulkCheckPermissionPair
 */
export interface BulkCheckPermissionPair {
    /**
     * @generated from protobuf field: authzed.api.v1.BulkCheckPermissionRequestItem request = 1;
     */
    request?: BulkCheckPermissionRequestItem;
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "item";
        /**
         * @generated from protobuf field: authzed.api.v1.BulkCheckPermissionResponseItem item = 2;
         */
        item: BulkCheckPermissionResponseItem;
    } | {
        oneofKind: "error";
        /**
         * @generated from protobuf field: google.rpc.Status error = 3;
         */
        error: Status;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message authzed.api.v1.BulkCheckPermissionResponseItem
 */
export interface BulkCheckPermissionResponseItem {
    /**
     * @generated from protobuf field: authzed.api.v1.CheckPermissionResponse.Permissionship permissionship = 1;
     */
    permissionship: CheckPermissionResponse_Permissionship;
    /**
     * @generated from protobuf field: authzed.api.v1.PartialCaveatInfo partial_caveat_info = 2;
     */
    partialCaveatInfo?: PartialCaveatInfo;
}
/**
 * BulkImportRelationshipsRequest represents one batch of the streaming
 * BulkImportRelationships API. The maximum size is only limited by the backing
 * datastore, and optimal size should be determined by the calling client
 * experimentally.
 *
 * @generated from protobuf message authzed.api.v1.BulkImportRelationshipsRequest
 */
export interface BulkImportRelationshipsRequest {
    /**
     * @generated from protobuf field: repeated authzed.api.v1.Relationship relationships = 1;
     */
    relationships: Relationship[];
}
/**
 * BulkImportRelationshipsResponse is returned on successful completion of the
 * bulk load stream, and contains the total number of relationships loaded.
 *
 * @generated from protobuf message authzed.api.v1.BulkImportRelationshipsResponse
 */
export interface BulkImportRelationshipsResponse {
    /**
     * @generated from protobuf field: uint64 num_loaded = 1;
     */
    numLoaded: string;
}
/**
 * BulkExportRelationshipsRequest represents a resumable request for
 * all relationships from the server.
 *
 * @generated from protobuf message authzed.api.v1.BulkExportRelationshipsRequest
 */
export interface BulkExportRelationshipsRequest {
    /**
     * @generated from protobuf field: authzed.api.v1.Consistency consistency = 1;
     */
    consistency?: Consistency;
    /**
     * optional_limit, if non-zero, specifies the limit on the number of
     * relationships the server can return in one page. By default, the server
     * will pick a page size, and the server is free to choose a smaller size
     * at will.
     *
     * @generated from protobuf field: uint32 optional_limit = 2;
     */
    optionalLimit: number;
    /**
     * optional_cursor, if specified, indicates the cursor after which results
     * should resume being returned. The cursor can be found on the
     * BulkExportRelationshipsResponse object.
     *
     * @generated from protobuf field: authzed.api.v1.Cursor optional_cursor = 3;
     */
    optionalCursor?: Cursor;
}
/**
 * BulkExportRelationshipsResponse is one page in a stream of relationship
 * groups that meet the criteria specified by the originating request. The
 * server will continue to stream back relationship groups as quickly as it can
 * until all relationships have been transmitted back.
 *
 * @generated from protobuf message authzed.api.v1.BulkExportRelationshipsResponse
 */
export interface BulkExportRelationshipsResponse {
    /**
     * @generated from protobuf field: authzed.api.v1.Cursor after_result_cursor = 1;
     */
    afterResultCursor?: Cursor;
    /**
     * @generated from protobuf field: repeated authzed.api.v1.Relationship relationships = 2;
     */
    relationships: Relationship[];
}
// @generated message type with reflection information, may provide speed optimized methods
class BulkCheckPermissionRequest$Type extends MessageType<BulkCheckPermissionRequest> {
    constructor() {
        super("authzed.api.v1.BulkCheckPermissionRequest", [
            { no: 1, name: "consistency", kind: "message", T: () => Consistency },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BulkCheckPermissionRequestItem, options: { "validate.rules": { repeated: { items: { message: { required: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<BulkCheckPermissionRequest>): BulkCheckPermissionRequest {
        const message = { items: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkCheckPermissionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkCheckPermissionRequest): BulkCheckPermissionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v1.Consistency consistency */ 1:
                    message.consistency = Consistency.internalBinaryRead(reader, reader.uint32(), options, message.consistency);
                    break;
                case /* repeated authzed.api.v1.BulkCheckPermissionRequestItem items */ 2:
                    message.items.push(BulkCheckPermissionRequestItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkCheckPermissionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v1.Consistency consistency = 1; */
        if (message.consistency)
            Consistency.internalBinaryWrite(message.consistency, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated authzed.api.v1.BulkCheckPermissionRequestItem items = 2; */
        for (let i = 0; i < message.items.length; i++)
            BulkCheckPermissionRequestItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkCheckPermissionRequest
 */
export const BulkCheckPermissionRequest = new BulkCheckPermissionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkCheckPermissionRequestItem$Type extends MessageType<BulkCheckPermissionRequestItem> {
    constructor() {
        super("authzed.api.v1.BulkCheckPermissionRequestItem", [
            { no: 1, name: "resource", kind: "message", T: () => ObjectReference, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "permission", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "64", pattern: "^([a-z][a-z0-9_]{1,62}[a-z0-9])?$" } } } },
            { no: 3, name: "subject", kind: "message", T: () => SubjectReference, options: { "validate.rules": { message: { required: true } } } },
            { no: 4, name: "context", kind: "message", T: () => Struct, options: { "validate.rules": { message: { required: false } } } }
        ]);
    }
    create(value?: PartialMessage<BulkCheckPermissionRequestItem>): BulkCheckPermissionRequestItem {
        const message = { permission: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkCheckPermissionRequestItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkCheckPermissionRequestItem): BulkCheckPermissionRequestItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v1.ObjectReference resource */ 1:
                    message.resource = ObjectReference.internalBinaryRead(reader, reader.uint32(), options, message.resource);
                    break;
                case /* string permission */ 2:
                    message.permission = reader.string();
                    break;
                case /* authzed.api.v1.SubjectReference subject */ 3:
                    message.subject = SubjectReference.internalBinaryRead(reader, reader.uint32(), options, message.subject);
                    break;
                case /* google.protobuf.Struct context */ 4:
                    message.context = Struct.internalBinaryRead(reader, reader.uint32(), options, message.context);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkCheckPermissionRequestItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v1.ObjectReference resource = 1; */
        if (message.resource)
            ObjectReference.internalBinaryWrite(message.resource, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string permission = 2; */
        if (message.permission !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.permission);
        /* authzed.api.v1.SubjectReference subject = 3; */
        if (message.subject)
            SubjectReference.internalBinaryWrite(message.subject, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Struct context = 4; */
        if (message.context)
            Struct.internalBinaryWrite(message.context, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkCheckPermissionRequestItem
 */
export const BulkCheckPermissionRequestItem = new BulkCheckPermissionRequestItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkCheckPermissionResponse$Type extends MessageType<BulkCheckPermissionResponse> {
    constructor() {
        super("authzed.api.v1.BulkCheckPermissionResponse", [
            { no: 1, name: "checked_at", kind: "message", T: () => ZedToken, options: { "validate.rules": { message: { required: false } } } },
            { no: 2, name: "pairs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BulkCheckPermissionPair, options: { "validate.rules": { repeated: { items: { message: { required: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<BulkCheckPermissionResponse>): BulkCheckPermissionResponse {
        const message = { pairs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkCheckPermissionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkCheckPermissionResponse): BulkCheckPermissionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v1.ZedToken checked_at */ 1:
                    message.checkedAt = ZedToken.internalBinaryRead(reader, reader.uint32(), options, message.checkedAt);
                    break;
                case /* repeated authzed.api.v1.BulkCheckPermissionPair pairs */ 2:
                    message.pairs.push(BulkCheckPermissionPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkCheckPermissionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v1.ZedToken checked_at = 1; */
        if (message.checkedAt)
            ZedToken.internalBinaryWrite(message.checkedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated authzed.api.v1.BulkCheckPermissionPair pairs = 2; */
        for (let i = 0; i < message.pairs.length; i++)
            BulkCheckPermissionPair.internalBinaryWrite(message.pairs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkCheckPermissionResponse
 */
export const BulkCheckPermissionResponse = new BulkCheckPermissionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkCheckPermissionPair$Type extends MessageType<BulkCheckPermissionPair> {
    constructor() {
        super("authzed.api.v1.BulkCheckPermissionPair", [
            { no: 1, name: "request", kind: "message", T: () => BulkCheckPermissionRequestItem },
            { no: 2, name: "item", kind: "message", oneof: "response", T: () => BulkCheckPermissionResponseItem },
            { no: 3, name: "error", kind: "message", oneof: "response", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<BulkCheckPermissionPair>): BulkCheckPermissionPair {
        const message = { response: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkCheckPermissionPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkCheckPermissionPair): BulkCheckPermissionPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v1.BulkCheckPermissionRequestItem request */ 1:
                    message.request = BulkCheckPermissionRequestItem.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* authzed.api.v1.BulkCheckPermissionResponseItem item */ 2:
                    message.response = {
                        oneofKind: "item",
                        item: BulkCheckPermissionResponseItem.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).item)
                    };
                    break;
                case /* google.rpc.Status error */ 3:
                    message.response = {
                        oneofKind: "error",
                        error: Status.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).error)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkCheckPermissionPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v1.BulkCheckPermissionRequestItem request = 1; */
        if (message.request)
            BulkCheckPermissionRequestItem.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* authzed.api.v1.BulkCheckPermissionResponseItem item = 2; */
        if (message.response.oneofKind === "item")
            BulkCheckPermissionResponseItem.internalBinaryWrite(message.response.item, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.rpc.Status error = 3; */
        if (message.response.oneofKind === "error")
            Status.internalBinaryWrite(message.response.error, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkCheckPermissionPair
 */
export const BulkCheckPermissionPair = new BulkCheckPermissionPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkCheckPermissionResponseItem$Type extends MessageType<BulkCheckPermissionResponseItem> {
    constructor() {
        super("authzed.api.v1.BulkCheckPermissionResponseItem", [
            { no: 1, name: "permissionship", kind: "enum", T: () => ["authzed.api.v1.CheckPermissionResponse.Permissionship", CheckPermissionResponse_Permissionship, "PERMISSIONSHIP_"], options: { "validate.rules": { enum: { definedOnly: true, notIn: [0] } } } },
            { no: 2, name: "partial_caveat_info", kind: "message", T: () => PartialCaveatInfo, options: { "validate.rules": { message: { required: false } } } }
        ]);
    }
    create(value?: PartialMessage<BulkCheckPermissionResponseItem>): BulkCheckPermissionResponseItem {
        const message = { permissionship: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkCheckPermissionResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkCheckPermissionResponseItem): BulkCheckPermissionResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v1.CheckPermissionResponse.Permissionship permissionship */ 1:
                    message.permissionship = reader.int32();
                    break;
                case /* authzed.api.v1.PartialCaveatInfo partial_caveat_info */ 2:
                    message.partialCaveatInfo = PartialCaveatInfo.internalBinaryRead(reader, reader.uint32(), options, message.partialCaveatInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkCheckPermissionResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v1.CheckPermissionResponse.Permissionship permissionship = 1; */
        if (message.permissionship !== 0)
            writer.tag(1, WireType.Varint).int32(message.permissionship);
        /* authzed.api.v1.PartialCaveatInfo partial_caveat_info = 2; */
        if (message.partialCaveatInfo)
            PartialCaveatInfo.internalBinaryWrite(message.partialCaveatInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkCheckPermissionResponseItem
 */
export const BulkCheckPermissionResponseItem = new BulkCheckPermissionResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkImportRelationshipsRequest$Type extends MessageType<BulkImportRelationshipsRequest> {
    constructor() {
        super("authzed.api.v1.BulkImportRelationshipsRequest", [
            { no: 1, name: "relationships", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relationship, options: { "validate.rules": { repeated: { items: { message: { required: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<BulkImportRelationshipsRequest>): BulkImportRelationshipsRequest {
        const message = { relationships: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkImportRelationshipsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkImportRelationshipsRequest): BulkImportRelationshipsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated authzed.api.v1.Relationship relationships */ 1:
                    message.relationships.push(Relationship.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkImportRelationshipsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated authzed.api.v1.Relationship relationships = 1; */
        for (let i = 0; i < message.relationships.length; i++)
            Relationship.internalBinaryWrite(message.relationships[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkImportRelationshipsRequest
 */
export const BulkImportRelationshipsRequest = new BulkImportRelationshipsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkImportRelationshipsResponse$Type extends MessageType<BulkImportRelationshipsResponse> {
    constructor() {
        super("authzed.api.v1.BulkImportRelationshipsResponse", [
            { no: 1, name: "num_loaded", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<BulkImportRelationshipsResponse>): BulkImportRelationshipsResponse {
        const message = { numLoaded: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkImportRelationshipsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkImportRelationshipsResponse): BulkImportRelationshipsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 num_loaded */ 1:
                    message.numLoaded = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkImportRelationshipsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 num_loaded = 1; */
        if (message.numLoaded !== "0")
            writer.tag(1, WireType.Varint).uint64(message.numLoaded);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkImportRelationshipsResponse
 */
export const BulkImportRelationshipsResponse = new BulkImportRelationshipsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkExportRelationshipsRequest$Type extends MessageType<BulkExportRelationshipsRequest> {
    constructor() {
        super("authzed.api.v1.BulkExportRelationshipsRequest", [
            { no: 1, name: "consistency", kind: "message", T: () => Consistency },
            { no: 2, name: "optional_limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lte: 10000, gte: 0 } } } },
            { no: 3, name: "optional_cursor", kind: "message", T: () => Cursor }
        ]);
    }
    create(value?: PartialMessage<BulkExportRelationshipsRequest>): BulkExportRelationshipsRequest {
        const message = { optionalLimit: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkExportRelationshipsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkExportRelationshipsRequest): BulkExportRelationshipsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v1.Consistency consistency */ 1:
                    message.consistency = Consistency.internalBinaryRead(reader, reader.uint32(), options, message.consistency);
                    break;
                case /* uint32 optional_limit */ 2:
                    message.optionalLimit = reader.uint32();
                    break;
                case /* authzed.api.v1.Cursor optional_cursor */ 3:
                    message.optionalCursor = Cursor.internalBinaryRead(reader, reader.uint32(), options, message.optionalCursor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkExportRelationshipsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v1.Consistency consistency = 1; */
        if (message.consistency)
            Consistency.internalBinaryWrite(message.consistency, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 optional_limit = 2; */
        if (message.optionalLimit !== 0)
            writer.tag(2, WireType.Varint).uint32(message.optionalLimit);
        /* authzed.api.v1.Cursor optional_cursor = 3; */
        if (message.optionalCursor)
            Cursor.internalBinaryWrite(message.optionalCursor, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkExportRelationshipsRequest
 */
export const BulkExportRelationshipsRequest = new BulkExportRelationshipsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BulkExportRelationshipsResponse$Type extends MessageType<BulkExportRelationshipsResponse> {
    constructor() {
        super("authzed.api.v1.BulkExportRelationshipsResponse", [
            { no: 1, name: "after_result_cursor", kind: "message", T: () => Cursor },
            { no: 2, name: "relationships", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Relationship }
        ]);
    }
    create(value?: PartialMessage<BulkExportRelationshipsResponse>): BulkExportRelationshipsResponse {
        const message = { relationships: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BulkExportRelationshipsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkExportRelationshipsResponse): BulkExportRelationshipsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* authzed.api.v1.Cursor after_result_cursor */ 1:
                    message.afterResultCursor = Cursor.internalBinaryRead(reader, reader.uint32(), options, message.afterResultCursor);
                    break;
                case /* repeated authzed.api.v1.Relationship relationships */ 2:
                    message.relationships.push(Relationship.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BulkExportRelationshipsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* authzed.api.v1.Cursor after_result_cursor = 1; */
        if (message.afterResultCursor)
            Cursor.internalBinaryWrite(message.afterResultCursor, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated authzed.api.v1.Relationship relationships = 2; */
        for (let i = 0; i < message.relationships.length; i++)
            Relationship.internalBinaryWrite(message.relationships[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message authzed.api.v1.BulkExportRelationshipsResponse
 */
export const BulkExportRelationshipsResponse = new BulkExportRelationshipsResponse$Type();
/**
 * @generated ServiceType for protobuf service authzed.api.v1.ExperimentalService
 */
export const ExperimentalService = new ServiceType("authzed.api.v1.ExperimentalService", [
    { name: "BulkImportRelationships", clientStreaming: true, options: { "google.api.http": { post: "/v1/experimental/relationships/bulkimport", body: "*" } }, I: BulkImportRelationshipsRequest, O: BulkImportRelationshipsResponse },
    { name: "BulkExportRelationships", serverStreaming: true, options: { "google.api.http": { post: "/v1/experimental/relationships/bulkexport", body: "*" } }, I: BulkExportRelationshipsRequest, O: BulkExportRelationshipsResponse },
    { name: "BulkCheckPermission", options: { "google.api.http": { post: "/v1/experimental/permissions/bulkcheckpermission", body: "*" } }, I: BulkCheckPermissionRequest, O: BulkCheckPermissionResponse }
]);
